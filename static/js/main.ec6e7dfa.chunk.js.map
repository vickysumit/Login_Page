{"version":3,"sources":["logo.svg","components/Login.js","components/Admin.js","components/Logout.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Login","props","loggedIn","localStorage","getItem","state","username","password","onChange","bind","submitForm","e","this","setState","target","name","value","preventDefault","setItem","alert","to","Card","className","CardBody","onSubmit","CardTitle","type","placeholder","Component","Admin","Logout","removeItem","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yJAAAA,EAAOC,QAAU,IAA0B,kC,wOCuG5BC,E,kDA/FX,WAAYC,GAAO,IAAD,sBACd,cAAMA,GACN,IAEIC,GAAW,EAJD,OAMF,MAJEC,aAAaC,QAAQ,WAK/BF,GAAS,GAEb,EAAKG,MAAM,CACPC,SAAS,GACTC,SAAS,GACTL,YAEJ,EAAKM,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAfJ,E,qDAiBTE,GACLC,KAAKC,SAAL,eACKF,EAAEG,OAAOC,KAAQJ,EAAEG,OAAOE,U,iCAGxBL,GACPA,EAAEM,iBADO,MAEmBL,KAAKP,MAA1BC,EAFE,EAEFA,SAASC,EAFP,EAEOA,SACA,UAAbD,GAAqC,UAAbC,GACvBJ,aAAae,QAAQ,QAAQ,mBAC7BN,KAAKC,SAAS,CACVX,UAAS,MAIbiB,MAAM,+CACNP,KAAKC,SAAS,CACVP,SAAS,GACTC,SAAS,Q,+BAMjB,OAAGK,KAAKP,MAAMH,SACH,kBAAC,IAAD,CAAUkB,GAAG,WAIpB,6BAEI,kBAACC,EAAA,EAAD,CAAMC,UAAU,qBACZ,kBAACC,EAAA,EAAD,KACI,0BAAMD,UAAU,OAAOE,SAAUZ,KAAKF,YAClC,2BAAOY,UAAU,OACb,4BACA,kBAACG,EAAA,EAAD,KAAW,qCAAU,uBAAGH,UAAU,0BAElC,4BACI,4BACA,2BAAG,yCAEH,4BACA,2BAAOI,KAAK,OAAOC,YAAY,WAAWZ,KAAK,WAAWC,MAAOJ,KAAKP,MAAMC,SAC5EE,SAAUI,KAAKJ,aAGnB,4BACI,4BACA,2BAAG,yCAEH,4BACA,2BAAOkB,KAAK,OAAOC,YAAY,WAAWZ,KAAK,WAAWC,MAAOJ,KAAKP,MAAME,SAC5EC,SAAUI,KAAKJ,aAGnB,4BACI,6BAEA,4BACA,2BAAOc,UAAU,4BAA4BI,KAAK,SAASV,MAAM,sB,GA9EjFY,aCuBLC,E,kDA1BX,WAAY5B,GAAO,IAAD,sBACd,cAAMA,GACN,IAEIC,GAAW,EAJD,OAMF,MAJEC,aAAaC,QAAQ,WAK/BF,GAAS,GAEb,EAAKG,MAAQ,CACTH,YAVU,E,qDAed,OAAyB,IAAtBU,KAAKP,MAAMH,SACD,kBAAC,IAAD,CAAUkB,GAAG,MAGtB,6BACI,wBAAIE,UAAU,wBAAd,wBACC,4BAAQA,UAAU,sBAAlB,IAAwC,kBAAC,IAAD,CAAMF,GAAG,UAAUE,UAAU,cAA7B,gB,GAtBrCM,aCcLE,E,kDAdX,WAAY7B,GAAO,IAAD,6BACd,cAAMA,GAENE,aAAa4B,WAAW,SAHV,E,qDAMd,OACI,6BACI,wBAAIT,UAAU,wBAAd,4BACA,4BAAQA,UAAU,sBAAlB,IAAwC,kBAAC,IAAD,CAAMF,GAAG,IAAIE,UAAU,cAAvB,sB,GAVnCM,aCsBNI,MAdf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAQC,OAAK,EAACC,KAAK,IAAIC,UAAWnC,IAClC,kBAAC,IAAD,CAAQkC,KAAK,SAASC,UAAWN,IACjC,kBAAC,IAAD,CAAQK,KAAK,UAAUC,UAAWL,O,MCJpBM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KAEE,kBAAC,EAAD,OAGFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ec6e7dfa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport '../style.css';\r\nimport {\r\n    Card, CardImg, CardText, CardBody,\r\n    CardTitle, CardSubtitle, Button\r\n  } from 'reactstrap';\r\nclass Login extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        const token = localStorage.getItem(\"token\")\r\n\r\n        let loggedIn = true\r\n\r\n        if(token == null){\r\n            loggedIn=false\r\n        }\r\n        this.state={\r\n            username:'',\r\n            password:'',\r\n            loggedIn\r\n        }\r\n        this.onChange = this.onChange.bind(this);\r\n        this.submitForm = this.submitForm.bind(this);\r\n    }\r\n    onChange(e){\r\n        this.setState({\r\n            [e.target.name] : e.target.value\r\n        });\r\n    }\r\n    submitForm(e){\r\n        e.preventDefault()\r\n        const {username,password} = this.state\r\n        if(username === \"admin\" && password === \"admin\"){\r\n            localStorage.setItem(\"token\",\"slfksjfksjfsdkf\")\r\n            this.setState({\r\n                loggedIn:true\r\n            })\r\n        }\r\n        else{\r\n            alert(\"Wrong username or password please try again\")\r\n            this.setState({\r\n                username:'',\r\n                password:''\r\n    \r\n            })\r\n            }\r\n    }\r\n    render(){\r\n        if(this.state.loggedIn){\r\n            return <Redirect to=\"/admin\" />\r\n        }\r\n      \r\n        return(\r\n            <div>\r\n                \r\n                <Card className=\"card bg-secondary\">\r\n                    <CardBody>                      \r\n                        <form className=\"form\" onSubmit={this.submitForm}>                    \r\n                            <table className=\"m-4\">\r\n                                <tr>\r\n                                <CardTitle><h1>Login <i className=\"fas fa-sign-in-alt\"></i></h1></CardTitle>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>\r\n                                    <p><b>Username</b></p>\r\n                                    </td>\r\n                                    <td>\r\n                                    <input type=\"text\" placeholder=\"Username\" name=\"username\" value={this.state.username}\r\n                                    onChange={this.onChange} />\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>\r\n                                    <p><b>Password</b></p>\r\n                                    </td>\r\n                                    <td>\r\n                                    <input type=\"text\" placeholder=\"Password\" name=\"password\" value={this.state.password}\r\n                                    onChange={this.onChange} />  \r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>\r\n                                    </td>\r\n                                    <td>\r\n                                    <input className=\"bg-primary btn text-white\" type=\"submit\" value=\"Submit\"/>\r\n                                    </td>\r\n                                </tr>\r\n                                \r\n                            </table>   \r\n                            \r\n                                        \r\n                           \r\n                        </form>\r\n                    </CardBody>\r\n                </Card>\r\n                \r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default Login;","import React,{Component} from 'react';\r\nimport {Link, Redirect} from 'react-router-dom';\r\n\r\nclass Admin extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        const token = localStorage.getItem(\"token\")\r\n\r\n        let loggedIn = true\r\n\r\n        if(token == null){\r\n            loggedIn=false\r\n        }\r\n        this.state = {\r\n            loggedIn\r\n        }\r\n      \r\n    }\r\n    render(){\r\n        if(this.state.loggedIn===false){\r\n            return   <Redirect to=\"/\" />\r\n        }\r\n        return(\r\n            <div>\r\n                <h1 className=\"text-muted display-4\">Welcom to Admin Page</h1>               \r\n                 <button className=\"bg-primary btn m-4\"> <Link to=\"/logout\" className=\"text-white\">Logout</Link></button> \r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Admin;","import React,{Component} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nclass Logout extends Component{\r\n    constructor(props){\r\n        super(props)\r\n\r\n        localStorage.removeItem(\"token\");\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1 className=\"text-muted display-4\">You have been logged out</h1>\r\n                <button className=\"bg-primary btn m-4\"> <Link to=\"/\" className=\"text-white\">Login Again?</Link></button> \r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Logout;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {BrowserRouter} from 'react-router-dom';\n\nimport { Switch, Route, Link, Redirect } from 'react-router-dom';\nimport Login from './components/Login';\nimport Admin from './components/Admin';\nimport Logout from './components/Logout';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n      <Route  exact path=\"/\" component={Login} />\n      <Route  path=\"/admin\" component={Admin} />\n      <Route  path=\"/logout\" component={Logout} />\n    \n    </Switch>\n    </BrowserRouter>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    \n    <App />\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}